pragma solidity ^0.4.11;

contract CrowdFunding
{
    
    struct Funder{
        address addr;
        uint amount;
    }
    
    struct Campaign{
        address beneficiary;
        uint fundingGoal;
        uint amount;
        uint numFunders;
        mapping(uint => Funder) funders;
    }
    
    uint numCampaigns;
    mapping (uint => Campaign) campaigns;
    

    
    function newCampaign(address beneficiary, uint goal) public returns (uint campaignID)
    {
        // initialize
        campaignID = numCampaigns++;
        campaigns[campaignID] = Campaign(beneficiary,goal,0,0);

    }
    
    function contribute(uint campaignID) public payable 
    {
        Campaign storage c = campaigns[campaignID];
        
        //another way to initialize
        c.funders[c.numFunders++] = Funder({addr: msg.sender, amount: msg.value});
        c.amount += msg.value;
    }
    
    
    function check(uint campaignID) public returns (bool reached)
    {
        Campaign storage c = campaigns[campaignID];
        
        if(c.amount < c.fundingGoal){
            return false;
        }
        
        uint amount = c.amount;
        // incase send much more
        c.amount = 0;
        if(!c.beneficiary.send(amount)){
            revert();
        }
        return true;
    }
}
